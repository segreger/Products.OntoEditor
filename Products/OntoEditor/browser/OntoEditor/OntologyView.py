# -*- coding: utf-8 -*-## File: OntologyView.py## Copyright (c) 2011 by []# Generator: ArchGenXML Version 2.5#            http://plone.org/products/archgenxml## GNU General Public License (GPL)#__author__ = """unknown <unknown>"""__docformat__ = 'plaintext'##code-section module-header #fill in your manual code here##/code-section module-headerfrom zope import interfacefrom zope import componentfrom Products.CMFPlone import utilsfrom Products.Five import BrowserViewfrom Products.CMFCore.utils import getToolByNamefrom zope.interface import implementsfrom Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixinfrom Products.ATReferenceBrowserWidget.ATReferenceBrowserWidget import  ReferenceBrowserWidgetfrom Products.Five.browser.pagetemplatefile import ViewPageTemplateFileclass OntologyView(BrowserView):    template = ViewPageTemplateFile('templates/OntologyView.pt')    def __init__(self, context, request):        self.context=context        self.request=request        self.urltool = getToolByName(self, "portal_url")        self.catalogtool = getToolByName(self, "portal_catalog")        self.portal = self.urltool.getPortalObject()    def __call__(self):        #listsubclasses=['LearnCurse_type', 'Tema_type']        #self.create_subclasses('contenttype', listsubclasses)        self.create_classes()        #self.cre_contenttype()        #return self.request.response.redirect(self.context.absolute_url())            def create_classes(self):        container=self.context        list_classes=['AbstractInterfaceElement','CompositeInterfaceElement', 'ElementExhibitor', 'IndefineVariable','PredefinedVariable', 'SimpleActivator', 'AbstractInterface']        for i in list_classes:            id_file=i            if hasattr(container, id_file):                obj = getattr(container, id_file)            else:                container.invokeFactory("OntoClass", id_file)                obj = getattr(container, id_file)                obj.setTitle(id_file)                obj.setDescription("This is the OntoClass "+id_file)                if i=='thing':                    thing_uid=obj.UID()                else:                    obj.setSubClassOf(thing_uid)                self.catalogtool.refreshCatalog()                obj=None        return self.request.response.redirect(self.context.absolute_url())    def create_subclasses(self, parentname, listsubclasses=[]):        container=self.context        list_classes=listsubclasses        parent_uid=self.classuid(parentname)        for i in list_classes:            id_file=i            if hasattr(container, id_file):                obj = getattr(container, id_file)            else:                container.invokeFactory("OntoClass", id_file)                obj = getattr(container, id_file)                obj.setTitle(id_file)                obj.setDescription("This is the OntoClass "+id_file)                obj.setSubClassOf(parent_uid)                self.catalogtool.refreshCatalog()                obj=None        return self.request.response.redirect(self.context.absolute_url())    def cre_contenttype(self):        container=self.context        list_classes=['contenttype']        thing_uid=self.classuid('thing')        for i in list_classes:            id_file=i            if hasattr(container, id_file):                obj = getattr(container, id_file)            else:                container.invokeFactory("OntoClass", id_file)                obj = getattr(container, id_file)                obj.setTitle(id_file)                obj.setDescription("This is the OntoClass "+id_file)                obj.setSubClassOf(thing_uid)                self.catalogtool.refreshCatalog()                obj=None        return self.request.response.redirect(self.context.absolute_url())    def classuid(self, classname):      if hasattr(self.context, classname):            thing=getattr(self.context,classname)            thing_uid=thing.UID()            return thing_uid      else:          return None##code-section class-header_OntologyView #fill in your manual code here##/code-section class-header_OntologyView##code-section module-footer #fill in your manual code here##/code-section module-footer